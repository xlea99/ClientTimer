import time
import tkinter as tk
import tkinter.ttk as ttk
import datetime
import tkinter.messagebox
import BaseFunctions as b
import threading
import os


appDataRoamingPath = os.getenv('APPDATA')
clientTimerFolderPath = appDataRoamingPath + "\\ICOMM Client Timer"
configPath = clientTimerFolderPath + "\\config.txt"
recentSavePath = clientTimerFolderPath + "\\recent_save.txt"
backupPath = clientTimerFolderPath + "\\Backups"



if(not os.path.exists(clientTimerFolderPath)):
    os.mkdir(clientTimerFolderPath)
if(not os.path.exists(backupPath)):
    os.mkdir(backupPath)
if(not os.path.exists(configPath) or not b.readConfigValue(parameterName="clientList",configFilePath=configPath)):
    configString = '''#####################
#######CLIENTS#######
#####################

# Here is a list of all clients that will be listed in the timer app. To add
# an additional client, simply add a new string ('clientName') preceded with
# a comma.
> clientList = []'''
    configFile = open(configPath,"w")
    configFile.write(configString)
    configFile.close()


ZEROTIME = 946706400.0

THEME_DICT = {"ClassicLight" : {"NORMAL_TEXT_COLOR" : "#010108", "BUTTON_TEXT_COLOR" : "#010108", "WINDOW_BG_COLOR" : "#EDEDED", "BUTTON_BG_OFF_COLOR" : "#BDBDBD", "BUTTON_BG_ON_COLOR" : "#8F8F8F", "BUTTON_BORDER_SIZE" : "1"},
              "ClassicDark" : {"NORMAL_TEXT_COLOR" : "#DBDBDB", "BUTTON_TEXT_COLOR" : "#DBDBDB", "WINDOW_BG_COLOR" : "#1C1C1C", "BUTTON_BG_OFF_COLOR" : "#4F4F4F", "BUTTON_BG_ON_COLOR" : "#BDBDBD","BUTTON_BORDER_SIZE" : "0"},
              "CimplyBlue" : {"NORMAL_TEXT_COLOR" : "#EAFFFF", "BUTTON_TEXT_COLOR" : "#4C4C4C", "WINDOW_BG_COLOR" : "#2574DB", "BUTTON_BG_OFF_COLOR" : "#F3F5F7", "BUTTON_BG_ON_COLOR" : "#184885","BUTTON_BORDER_SIZE" : "0"},
              "TwilightTMA" : {"NORMAL_TEXT_COLOR" : "#FFD700", "BUTTON_TEXT_COLOR" : "#000000", "WINDOW_BG_COLOR" : "#16527D", "BUTTON_BG_OFF_COLOR" : "#E9E9ED", "BUTTON_BG_ON_COLOR" : "#B5B5B9","BUTTON_BORDER_SIZE" : "0"},
              "BlackHerizons" : {"NORMAL_TEXT_COLOR" : "#EE0000", "BUTTON_TEXT_COLOR" : "#010108", "WINDOW_BG_COLOR" : "#000000", "BUTTON_BG_OFF_COLOR" : "#FFFFFF", "BUTTON_BG_ON_COLOR" : "#184885","BUTTON_BORDER_SIZE" : "1"},
              "PrettyInPinkMobile" : {"NORMAL_TEXT_COLOR" : "#E20074", "BUTTON_TEXT_COLOR" : "#262626", "WINDOW_BG_COLOR" : "#FFFFFF", "BUTTON_BG_OFF_COLOR" : "#E8E8E8", "BUTTON_BG_ON_COLOR" : "#9F9F9F","BUTTON_BORDER_SIZE" : "1"},
              "NothingElseInStockGreen" : {"NORMAL_TEXT_COLOR" : "#5DF5B8", "BUTTON_TEXT_COLOR" : "#5DF5B8", "WINDOW_BG_COLOR" : "#667765", "BUTTON_BG_OFF_COLOR" : "#394E3F", "BUTTON_BG_ON_COLOR" : "#243128","BUTTON_BORDER_SIZE" : "0"},
              "50ShadesOfTeamsPopups" : {"NORMAL_TEXT_COLOR" : "#FFFDFF", "BUTTON_TEXT_COLOR" : "#FFFDFF", "WINDOW_BG_COLOR" : "#7C7692", "BUTTON_BG_OFF_COLOR" : "#6363A9", "BUTTON_BG_ON_COLOR" : "#C4314D","BUTTON_BORDER_SIZE" : "0"},
              "UnavailableOrangeGetup" : {"NORMAL_TEXT_COLOR" : "#FBFFFF", "BUTTON_TEXT_COLOR" : "#A7E3F2", "WINDOW_BG_COLOR" : "#E85D46", "BUTTON_BG_OFF_COLOR" : "#007CBE", "BUTTON_BG_ON_COLOR" : "#13628C","BUTTON_BORDER_SIZE" : "1"},
              }
THEME = "UnavailableOrangeGetup"#b.readConfigValue("programColorTheme",configFilePath=configPath)

NORMAL_TEXT_COLOR = THEME_DICT[THEME]["NORMAL_TEXT_COLOR"]
BUTTON_TEXT_COLOR = THEME_DICT[THEME]["BUTTON_TEXT_COLOR"]
WINDOW_BG_COLOR = THEME_DICT[THEME]["WINDOW_BG_COLOR"]
BUTTON_BG_ON_COLOR = THEME_DICT[THEME]["BUTTON_BG_ON_COLOR"]
BUTTON_BG_OFF_COLOR = THEME_DICT[THEME]["BUTTON_BG_OFF_COLOR"]
BUTTON_BORDER_SIZE = THEME_DICT[THEME]["BUTTON_BORDER_SIZE"]


class ClientTracker:

    # Init method opens tkinter.root, builds initial window.
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Client Timer")
        if(os.path.exists("icon.ico")):
            self.root.wm_iconbitmap("icon.ico")
        self.root.configure(bg=WINDOW_BG_COLOR)
        self.root.wm_attributes("-topmost", 1)


        #self.root.protocol('WM_DELETE_WINDOW', self.close_program)  # call function() when window is closed
        #self.root.overrideredirect(True)
#
        #self.title_bar = tkinter.Frame(self.root,bg=WINDOW_BG_COLOR,relief="raised",bd=1)
        #self.title_bar_close_button = tkinter.Button(self.title_bar,text="X",command=self.close_program,width=2,height=1,fg=NORMAL_TEXT_COLOR,bg=WINDOW_BG_COLOR,bd=0,highlightthickness=0)
        #self.title_bar_minimize_button = tkinter.Button(self.title_bar, text="_", command=self.root.iconify)
        #def toggle_maximize():
        #    if self.root.state() == 'normal':
        #        self.root.state('zoomed')
        #    else:
        #        self.root.state('normal')
        #self.title_bar_maximize_button = tkinter.Button(self.title_bar, text="[]", command=toggle_maximize)
        #self.title_bar_close_button.pack(side=tkinter.RIGHT)
        #self.title_bar_maximize_button.pack(side=tkinter.RIGHT)
        #self.title_bar_minimize_button.pack(side=tkinter.RIGHT)



        #self.main_window = tkinter.Canvas(self.root, bg=WINDOW_BG_COLOR,bd=0,highlightthickness=1)

        #self.title_bar.pack(expand=1,fill=tkinter.X)
        #self.title_bar_close_button.pack(side=tkinter.RIGHT)
        #self.main_window.pack(expand=1,fill=tkinter.BOTH)


        self.offset_x = 0
        self.offset_y = 0
        '''
        def on_tb_move(event):
            x, y = event.x_root - self.offset_x, event.y_root - self.offset_y
            self.root.geometry(f"+{x}+{y}")

        def on_tb_click(event):
            x, y = event.x, event.y
            tb_height = self.title_bar.winfo_height()
            tb_y = self.title_bar.winfo_rooty()
            if tb_y <= y <= tb_y + tb_height / 2:
                self.offset_x = x - self.title_bar.winfo_x()
                self.offset_y = y - self.title_bar.winfo_y()
                self.root.bind("<B1-Motion>", on_tb_move)
            else:
                self.root.unbind("<B1-Motion>")

        def on_tb_click2(event):
            self.offset_x = event.x - self.title_bar.winfo_x()
            self.offset_y = event.y - self.title_bar.winfo_y()
            self.title_bar.bind("<B1-Motion>", on_tb_move)

        def on_tb_release(event):
            self.title_bar.unbind("<B1-Motion>")

        self.title_bar.bind("<Button-1>", on_tb_click)
        self.title_bar.bind("<ButtonRelease-1>", on_tb_release)
        '''


        style = ttk.Style(self.root)
        style.theme_use("clam")

        self.loadedClients = {}
        self.runningClients = []
        self.clientList = []


        # Create a frame for the client list
        self.client_frame = tk.Frame(self.root)
        self.client_frame.configure(bg=WINDOW_BG_COLOR)
        self.client_frame.grid(row=0,column=0,columnspan=5,pady=7,padx=5)

        self.staticCounter = 0

        self.client_input = tk.Entry(self.root,bg=BUTTON_BG_OFF_COLOR,fg=BUTTON_TEXT_COLOR,bd=BUTTON_BORDER_SIZE)
        self.add_button = tk.Button(self.root, text="Add Client", command=lambda: self.add_client(self.client_input.get()),fg=BUTTON_TEXT_COLOR,bg=BUTTON_BG_OFF_COLOR,activeforeground=BUTTON_TEXT_COLOR,activebackground=BUTTON_BG_ON_COLOR,bd=BUTTON_BORDER_SIZE)
        self.reset_times_button = tk.Button(self.root,text="Reset All Times",command=self.reset_times,bg=BUTTON_BG_OFF_COLOR,fg=BUTTON_TEXT_COLOR,activeforeground=BUTTON_TEXT_COLOR,activebackground=BUTTON_BG_ON_COLOR,bd=BUTTON_BORDER_SIZE)

        self.genClientList()
        self.genConfigOptions()

        if(self.check_for_save()):
            self.restore_save()
    # Close program method attempts to save times as a recent saves, so you can come back
    # later.
    def close_program(self):
        try:
            self.save_times()
            self.root.destroy()
        except:
            tk.messagebox.showerror('Program Crash', 'Error: The program crashed while trying to save data.')
            self.root.destroy()

    # Functions to add and remove a client to the list. These changes are permanent, and will
    # persist through multiple executions of the program.
    def add_client(self,clientName):
        if(clientName in self.loadedClients.keys()):
            tk.messagebox.showerror('Duplicate Error', 'Error: A client with the same name already exists!')
            return False
        else:
            b.setConfigValue(parameterName="clientList",parameterValue=b.readConfigValue(parameterName="clientList",configFilePath=configPath) + [clientName],configFilePath=configPath)
            self.genClientList()
            return True
    def remove_client(self,clientName):
        newArray = b.readConfigValue(parameterName="clientList",configFilePath=configPath)
        newArray.remove(clientName)
        b.setConfigValue(parameterName="clientList", parameterValue=newArray, configFilePath=configPath)
        self.remove_timer(clientName)
        self.loadedClients.pop(clientName)
        self.genClientList()
        if(clientName in self.runningClients):
            self.runningClients.remove(clientName)
        return True
    # This method resets all times of all clients, after prompting the user with a confirmation box.
    def reset_times(self):
        if(tkinter.messagebox.askyesno("Confirm","Are you sure you would like to reset all times?")):
            self.stop_timer()
            for loadedClient in self.loadedClients.keys():
                self.loadedClients[loadedClient]["saved_time"] = ZEROTIME
            self.genClientList()
    # This method populates the app with all clients in self.clientList. It also
    # can reload the clientList from the config file.
    def genClientList(self,reloadFile=True):
        for widget in self.client_frame.grid_slaves():
            widget.grid_forget()

        if(reloadFile):
            self.clientList = b.readConfigValue(parameterName="clientList",configFilePath=configPath)


        if(len(self.clientList) == 0):
            blank_label = tk.Label(self.client_frame, text="No clients. Add one to begin!", font=('Helvetica', 14),fg=NORMAL_TEXT_COLOR)
            blank_label.grid(row=0,column=0)
        else:
            counter = 0

            maximumLength = 0
            for client in self.clientList:
                if(len(client) > maximumLength):
                    maximumLength = len(client)
            # Create a label for each client
            for client in self.clientList:
                client = client.strip()
                client_label = ttk.Label(self.client_frame, text=client + ":", font=('Helvetica', 14),width=maximumLength+1,anchor="center",background=WINDOW_BG_COLOR,foreground=NORMAL_TEXT_COLOR)
                client_label.grid(row=counter,column=0)

                # Create a start button for each client
                start_button = tk.Button(self.client_frame, text="Start",font=('Helvetica', 12),bg=BUTTON_BG_OFF_COLOR,fg=BUTTON_TEXT_COLOR,activeforeground=BUTTON_TEXT_COLOR,activebackground=BUTTON_BG_ON_COLOR,bd=BUTTON_BORDER_SIZE)
                start_button.grid(row=counter,column=1)

                start_button.bind("<Button-1>",lambda event, _client = client: self.start_timer(_client))
                start_button.bind("<Shift-Button-1>", lambda event, _client = client: self.add_timer(_client))

                # Create a stop button for each client
                stop_button = tk.Button(self.client_frame, text="Stop",font=('Helvetica', 12),bg=BUTTON_BG_OFF_COLOR,fg=BUTTON_TEXT_COLOR,activeforeground=BUTTON_TEXT_COLOR,activebackground=BUTTON_BG_ON_COLOR,bd=BUTTON_BORDER_SIZE)
                stop_button.grid(row=counter,column=2)

                stop_button.bind("<Button-1>",lambda event: self.stop_timer())
                stop_button.bind("<Shift-Button-1>",lambda event,_client = client: self.remove_timer(_client))



                removeTimeButton = tk.Button(self.client_frame, text="-5", font=("Helvetica", 9),bg=BUTTON_BG_OFF_COLOR,fg=BUTTON_TEXT_COLOR,activeforeground=BUTTON_TEXT_COLOR,activebackground=BUTTON_BG_ON_COLOR,bd=BUTTON_BORDER_SIZE)
                removeTimeButton.grid(row=counter, column=4)
                addTimeButton = tk.Button(self.client_frame, text="+5", font=("Helvetica", 9),bg=BUTTON_BG_OFF_COLOR,fg=BUTTON_TEXT_COLOR,activeforeground=BUTTON_TEXT_COLOR,activebackground=BUTTON_BG_ON_COLOR,bd=BUTTON_BORDER_SIZE)
                addTimeButton.grid(row=counter, column=5)

                addTimeButton.bind("<Button-1>", lambda event, _client=client: self.adjust_timer(_client,300))
                addTimeButton.bind("<Shift-Button-1>", lambda event, _client=client: self.adjust_timer(_client,60))

                removeTimeButton.bind("<Button-1>", lambda event, _client=client: self.adjust_timer(_client, -300))
                removeTimeButton.bind("<Shift-Button-1>", lambda event, _client=client: self.adjust_timer(_client, -60))

                removeClientButton = tk.Button(self.client_frame,text="X",font=("Helvetica",9),command=lambda _client=client: self.remove_client(_client),bg=BUTTON_BG_OFF_COLOR,fg=BUTTON_TEXT_COLOR,activeforeground=BUTTON_TEXT_COLOR,activebackground=BUTTON_BG_ON_COLOR,bd=BUTTON_BORDER_SIZE)
                removeClientButton.grid(row=counter,column=6)

                # Create a label to display the running time for each client
                time_label = ttk.Label(self.client_frame,font=('Helvetica', 12),width=8,anchor="center",background=WINDOW_BG_COLOR,foreground=NORMAL_TEXT_COLOR)
                time_label.grid(row=counter,column=3)

                if(client in self.loadedClients):
                    if(self.loadedClients[client]["running"]):
                        time_label.configure(font=('Helvetica', 12,"bold"))
                        client_label.configure(font=('Helvetica', 14,"bold"))
                        time_label.configure(text=datetime.datetime.strftime(datetime.datetime.fromtimestamp(self.loadedClients[client]["saved_time"] + (time.perf_counter() - self.loadedClients[client]["start_time"])), '%H:%M:%S'))
                    else:
                        time_label.configure(text=datetime.datetime.strftime(datetime.datetime.fromtimestamp(self.loadedClients[client]["saved_time"]), '%H:%M:%S'))
                    self.loadedClients[client]["time_label"] = time_label
                    self.loadedClients[client]["client_label"] = client_label
                    counter += 1
                else:
                    time_label.configure(text="00:00:00")
                    # Add the time label to the dictionary of clients
                    self.loadedClients[client] = {"client_label" : client_label, "time_label" : time_label, "running": False, "saved_time" : ZEROTIME, "start_time" : None}
                    counter += 1
    # This generates the necessary input boxes and buttons for config.
    def genConfigOptions(self):
        # Create an input box and associated buttons for adding and removing clients

        self.client_input.grid(row=1,column=1)
        self.add_button.grid(row=2,column=1,pady=5)
        self.reset_times_button.grid(row=4,column=1,pady=5)

    # Simple start and stop methods for each timer. Start requires the clientName,
    # but stop works off of the self.runningClient variable.
    def start_timer(self,clientName):
        rightNow = time.perf_counter()
        self.stop_timer()
        self.runningClients = [clientName]

        # Set the running flag to True and store the start time
        self.loadedClients[clientName]["running"] = True
        self.loadedClients[clientName]["start_time"] = rightNow
        self.loadedClients[clientName]["time_label"].configure(font=('Helvetica', 12, "bold"))
        self.loadedClients[clientName]["client_label"].configure(font=('Helvetica', 14, "bold"))

        self.update_time_label()
    def add_timer(self,clientName):
        if (clientName not in self.runningClients):
            rightNow = time.perf_counter()
            self.runningClients += [clientName]

            # Set the running flag to True and store the start time
            self.loadedClients[clientName]["running"] = True
            self.loadedClients[clientName]["start_time"] = rightNow
            self.loadedClients[clientName]["time_label"].configure(font=('Helvetica', 12, "bold"))
            self.loadedClients[clientName]["client_label"].configure(font=('Helvetica', 14, "bold"))
    def stop_timer(self):
        if(len(self.runningClients) > 0):
            for runningClient in self.runningClients:
                self.loadedClients[runningClient]["saved_time"] += (time.perf_counter() - self.loadedClients[runningClient]["start_time"])
                self.loadedClients[runningClient]["running"] = False
                self.loadedClients[runningClient]["start_time"] = None
                self.loadedClients[runningClient]["time_label"].configure(font=('Helvetica', 12))
                self.loadedClients[runningClient]["client_label"].configure(font=('Helvetica', 14))


        self.runningClients = []
    def remove_timer(self,clientName):
        if (clientName in self.runningClients):
            self.runningClients.remove(clientName)
            self.loadedClients[clientName]["saved_time"] += (time.perf_counter() - self.loadedClients[clientName]["start_time"])

            # Set the running flag to True and store the start time
            self.loadedClients[clientName]["running"] = False
            self.loadedClients[clientName]["start_time"] = None
            self.loadedClients[clientName]["time_label"].configure(font=('Helvetica', 12))
            self.loadedClients[clientName]["client_label"].configure(font=('Helvetica', 14))
    # This method can be used to add or remove a set amount of time from a timer.
    def adjust_timer(self,clientName,timeAdjustment):
        rightNow = time.perf_counter()
        thisClientStartTime = self.loadedClients[clientName]["start_time"]
        if(thisClientStartTime is None):
            self.loadedClients[clientName]["saved_time"] += timeAdjustment
            if(self.loadedClients[clientName]["running"]):
                self.loadedClients[clientName]["start_time"] = rightNow
        else:
            self.loadedClients[clientName]["saved_time"] += ((rightNow - self.loadedClients[clientName]["start_time"]) + timeAdjustment)
            if (self.loadedClients[clientName]["running"]):
                self.loadedClients[clientName]["start_time"] = rightNow
        self.update_time_label(updateAll=True)


    # This method restores existing time values from an existing save file. check_for_save
    # checks to see if a file exists from TODAY with saved time values, and if it does, it prompts
    # the user to ask if they want to restore from that backup or not.
    def restore_save(self):
        thisFile = open(recentSavePath,"r")
        counter = -1
        for line in thisFile:
            counter += 1
            if(counter < 2):
                continue
            if(line.strip() == ""):
                continue
            lineArray = line.split("|")
            savedClient = lineArray[0].strip()
            savedTime = lineArray[1].strip()
            if (savedClient == "" or savedTime == ""):
                continue

            if(savedClient not in self.loadedClients):
                self.add_client(savedClient)

            try:
                timeObject = datetime.datetime.strptime(savedTime,"%H:%M:%S")
                timeObject = timeObject.replace(year=2000)
                self.loadedClients[savedClient]["saved_time"] = timeObject.timestamp()
            except ValueError:
                continue

        self.update_time_label(updateAll=True)
        thisFile.close()
    def check_for_save(self):
        if(os.path.exists(recentSavePath)):
            thisFile = open(recentSavePath,"r")
            today = datetime.datetime.today()
            try:
                fileStamp = datetime.datetime.strptime(thisFile.readlines()[0].strip(),"%m/%d/%y")
            except:
                return False
            day_delta = today - fileStamp
            if(day_delta.days == 0):
                return True
            else:
                return False
        else:
            return False

    def secondary_loop(self):
        self.staticCounter += 1
        self.update_time_label()

        # Call this function again after 1 second
        self.root.after(1000, self.secondary_loop)

        if(self.staticCounter % 20 == 0):
            self.save_times()
        if(self.staticCounter % 1000 == 0):
            b.backup(recentSavePath,backupPath,5)
    # This method simply saves all times to the given folder.
    def save_times(self):
        rightNow = time.perf_counter()
        for runningClient in self.runningClients:
            self.loadedClients[runningClient]["saved_time"] += (rightNow - self.loadedClients[runningClient]["start_time"])
            self.loadedClients[runningClient]["start_time"] = rightNow

        runningString = datetime.datetime.strftime(datetime.datetime.now(),"%m/%d/%y")
        runningString += "\n\n"
        for client in self.loadedClients.keys():
            runningString += client + " | " + datetime.datetime.strftime(datetime.datetime.fromtimestamp(self.loadedClients[client]["saved_time"]), '%H:%M:%S') + "\n"

        saveFile = open(recentSavePath,"w")
        saveFile.writelines(runningString)
        saveFile.close()
    # This method updates the currently active time_label with the new time. Optionally, this method can
    # update all time labels.
    def update_time_label(self,updateAll=False):
        if(updateAll):
            clientList = self.loadedClients.keys()
        else:
            clientList = self.runningClients
        for client in clientList:
            if(self.loadedClients[client]["running"]):
                self.loadedClients[client]["time_label"].configure(text=datetime.datetime.strftime(datetime.datetime.fromtimestamp(self.loadedClients[client]["saved_time"] + (time.perf_counter() - self.loadedClients[client]["start_time"])), '%H:%M:%S'))
            else:
                self.loadedClients[client]["time_label"].configure(text=datetime.datetime.strftime(datetime.datetime.fromtimestamp(self.loadedClients[client]["saved_time"]), '%H:%M:%S'))
    # Main loop drives the actual program.

    def on_mouse_motion(self, event):
        pass
        '''
        edge_threshold = 5
        if (event.widget == self.title_bar):
            tb_height = self.title_bar.winfo_height()
            tb_width = self.title_bar.winfo_width()
            tb_base_y = self.title_bar.winfo_rooty()
            tb_base_x = self.title_bar.winfo_rootx()
            x = self.title_bar.winfo_x()
            y = self.title_bar.winfo_y()

            if (y >= tb_base_y + tb_height - edge_threshold):
                print("moving range")
            else:
                print("resize range")

        x, y = event.x, event.y

        width, height = self.root.winfo_width(), self.root.winfo_height()


        left_edge = x < edge_threshold
        right_edge = x > width - edge_threshold
        top_edge = y < edge_threshold
        bottom_edge = y > height - edge_threshold

        if left_edge and top_edge:
            self.root.config(cursor="top_left_corner")
        elif left_edge and bottom_edge:
            self.root.config(cursor="bottom_left_corner")
        elif right_edge and top_edge:
            self.root.config(cursor="top_right_corner")
        elif right_edge and bottom_edge:
            self.root.config(cursor="bottom_right_corner")
        elif left_edge:
            self.root.config(cursor="left_side")
        elif right_edge:
            self.root.config(cursor="right_side")
        elif top_edge:
            self.root.config(cursor="top_side")
        elif bottom_edge:
            self.root.config(cursor="bottom_side")
        else:
            self.root.config(cursor="")

        if right_edge:
            self.root.unbind("<B1-Motion>")
            self.root.bind("<B1-Motion>", self.on_mouse_drag_right)
        elif left_edge:
            self.root.unbind("<B1-Motion>")
            self.root.bind("<B1-Motion>", self.on_mouse_drag_left)
        elif top_edge:
            self.root.unbind("<B1-Motion>")
            self.root.bind("<B1-Motion>", self.on_mouse_drag_top)
        elif bottom_edge:
            self.root.unbind("<B1-Motion>")
            self.root.bind("<B1-Motion>", self.on_mouse_drag_bottom)
        else:
            self.root.unbind("<B1-Motion>")
        '''

    def on_mouse_drag_right(self, event):
        x = event.x_root
        y = event.y_root
        width = x - self.root.winfo_rootx()
        self.root.geometry(f"{width}x{self.root.winfo_height()}+{self.root.winfo_rootx()}+{self.root.winfo_rooty()}")

    def on_mouse_drag_left(self, event):
        x = event.x_root
        y = event.y_root
        width = self.root.winfo_width() + (self.root.winfo_rootx() - x)
        self.root.geometry(f"{width}x{self.root.winfo_height()}+{x}+{self.root.winfo_rooty()}")

    def on_mouse_drag_top(self, event):
        x = event.x_root
        y = event.y_root
        height = self.root.winfo_rooty() + self.root.winfo_height() - y
        self.root.geometry(f"{self.root.winfo_width()}x{height}+{self.root.winfo_rootx()}+{y}")

    def on_mouse_drag_bottom(self, event):
        x = event.x_root
        y = event.y_root
        height = self.root.winfo_rooty() + self.root.winfo_height() - y
        self.root.geometry(f"{self.root.winfo_width()}x{height}+{self.root.winfo_rootx()}+{y}")



    def main_loop(self):
        secondaryThread = threading.Thread(self.secondary_loop())
        secondaryThread.start()

        self.root.bind("<Motion>", self.on_mouse_motion)
        self.root.mainloop()

app = ClientTracker()
app.main_loop()
